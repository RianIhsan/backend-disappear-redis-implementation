// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/capstone-kelompok-7/backend-disappear/module/users/domain"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryAuthInterface is an autogenerated mock type for the RepositoryAuthInterface type
type RepositoryAuthInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: email
func (_m *RepositoryAuthInterface) Login(email string) (*domain.UserModels, error) {
	ret := _m.Called(email)

	var r0 *domain.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.UserModels, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.UserModels); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newData
func (_m *RepositoryAuthInterface) Register(newData *domain.UserModels) (*domain.UserModels, error) {
	ret := _m.Called(newData)

	var r0 *domain.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.UserModels) (*domain.UserModels, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*domain.UserModels) *domain.UserModels); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.UserModels) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryAuthInterface creates a new instance of RepositoryAuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryAuthInterface {
	mock := &RepositoryAuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
